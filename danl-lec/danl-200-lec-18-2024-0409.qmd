---
title: Lecture 18
subtitle: Select variables with `select()`; Rename variables with `rename()`; Relocate variables with `relocate()`; Add a new variable with `mutate()`
format:
  clean-revealjs:
    self-contained: true
    incremental: true
    code-annotations: hover

    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2024-04-04
execute: 
  eval: true
  echo: true
callout-icon: false

from: markdown+emoji
include-after-body: target-hover.html # effect.html

# bibliography: refs.bib
---


```{r setup}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)


theme_set(theme_fivethirtyeight()+
          theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(0,10,0,0)),
                axis.text.x = element_text(size = rel(1.5)),
                axis.text.y = element_text(size = rel(1.5)),
                strip.text = element_text(size = rel(1.5)),
                legend.position = "top",
                legend.text = element_text(size = rel(1.5)),
                legend.title = element_text(size = rel(1.5))
                )
          )
```




## Data Transformation
### Pipe (`|>`) Operator
<!-- ### `dplyr` basics -->

- Because the first argument is a `data.frame` and the output is a `data.frame`, `dplyr` verbs work well with the **pipe**, `|>` 
  - **Ctrl + Shift + M** for Windows; **command + Shift + M** for Mac. 


- The **pipe** (`|>`) takes the thing on its left and passes it along to the function on its right so that
  - `f(x, y)` is equivalent to `x |> f(y)`. 
  - e.g., `filter(DATA_FRAME, LOGICAL_STATEMENT)` is equivalent to `DATA_FRAME |>  filter(LOGICAL_STATEMENT)`.


- The easiest way to pronounce the **pipe** (`|>`) is “**then**”. 
  - The **pipe** (`|>`) is super useful when we have <u>*a chain of data transforming operations*</u> to do.




# Select variables with `select()` {background-color="#1c4982"}




# Select variables with `select()`

:::{.nonincremental}

- It’s not uncommon to get datasets with hundreds or thousands of variables.
- `select()` allows us to narrow in on the variables we're actually interested in. 


::: {.panel-tabset}
## Basic
- We can select variables by their names.
```{.r}
flights |> 
  select(year, month, day)
```



## `VAR_1:VAR_2`
- With `select(VAR_1:VAR_2)`, we can select all the variables between `VARIABLE_1` and `VARIABLE_2`, inclusively:
```{.r}
flights |> 
  select(year:day)
```



## Removal
- With `select(-VARIABLES)`, we can remove variables:
```{.r}
flights |> 
  select(-(year:day))
```



## Select Helpers
- There are a number of helper functions we can use within `select()`:

  - `starts_with("abc")`: matches names that begin with "abc".
  
  - `ends_with("xyz")`: matches names that end with "xyz".
  
  - `contains("ijk")`: matches names that contain "ijk".
  
  - `num_range("x", 1:3)`: matches x1, x2 and x3.


:::

:::




# Rename variables with `rename()` {background-color="#1c4982"}


## Rename variables with `rename()`

```{.r}
flights |> 
  rename( tail_num = tailnum )
```


- `rename()` can be used to rename variables:

  - `DATA_FRAME |> rename(NEW_VARIABLE = EXISTING_VARIABLE)`


# Relocate variables with `relocate()` {background-color="#1c4982"}


## Relocate variables with `relocate()`

```{.r}
flights |> 
  relocate(time_hour, air_time)
  
```


:::: {.columns}
::: {.column width="50%"}

```{.r}
flights |> 
  relocate(year:dep_time, 
           .before = time_hour)
```

:::


::: {.column width="50%"}

```{.r}
flights |> 
  relocate(starts_with("arr"), 
           .after = dep_time)
```

:::

::::


- We can use `relocate()` to move variables around. 
  - We can specify `.before` and `.after` arguments to choose where to put variables.



# Add new variables with `mutate()` {background-color="#1c4982"}



## Add new variables with `mutate()`
###  Arithmetic operations

:::{.nonincremental}
- `mutate()` is useful to add new variables that are functions of existing variables.
  - New variables can be a result of arithmetic operations.
  - Arithmetic operators: `+`, `-`, `*`, `/`, `^`
  - Modular arithmetic: `%/%` (integer division) and `%%` (remainder).

:::
```{.r}
flights |> 
  select(dep_time) |> 
  mutate(
    hour = dep_time %/% 100,
    minute = dep_time %% 100
    )
```




## Add new variables with `mutate()`
:::{.nonincremental}

- A new variable can be based on the new variable within the `mutate()` function.

:::

```{.r}
flights |> 
  select(year:day, ends_with("delay"), air_time) |> 
  mutate(gain = dep_delay - arr_delay,
         hours = air_time / 60,
         gain_per_hour = gain / hours ) 
```




## Add new variables with `mutate()`
::: {.nonincremental}
::: {.panel-tabset}
## `.before`
- We can use the `.before` argument to add the variables to the position of a column:

```{.r}
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .before = 1  # try different position numbers.
  )
```

- The `.` is a sign that `.before` is an **argument** to the function, not the name of variable.



## `.after`
- In both `.before` and `.after`, we can use the variable name instead of a position number.

```{.r}
flights |> 
  mutate(
    gain = dep_delay - arr_delay,
    speed = distance / air_time * 60,
    .after = day  
  )
```


:::
:::


## Add new variables with `mutate()`
###  Useful creation functions

<!-- - There are many functions for creating new variables that we can use with `mutate()`. -->
  1. Offsets: `lead()` and `lag()`
  
  2. If-else conditions: `ifelse()`
  
  3. Ranking functions: `min_rank()`, `dense_rank()`, `percent_rank()`, `row_number()`, and more
  
  4. Other useful functions: `log()`, `log10()`, `exp()`, `sqrt()`, `round()`, `factor()`, `as.character()`, `as.numeric()`, `as.integer()`, and more

  


## Add new variables with `mutate()`
###  1. `lead()` and `lag()`

:::{.nonincremental}

- Offsets: `lead()` and `lag()` allow us to refer to leading or lagging values.

::: {.panel-tabset}
## Offsets
```{.r}
df <- data.frame( x = 1:10 )

df <- df |> 
  mutate(x_lag = lag(x),
         x_lead = lead(x))
```


## Change
<!-- - These functions are useful for calculating a change in a time-series variable -->

:::: {.columns}
::: {.column width="50%"}
- A change in GDP in year $y$ and a percentage change in GDP in year $y$ are calculated as follows:


$$
\begin{align}
\Delta GDP_{y} = GDP_{y} - GDP_{y-1}
\end{align}
$$

$$
\begin{align}
\%\Delta GDP_{y} = \frac{GDP_{y} - GDP_{y-1}}{GDP_{y}}
\end{align}
$$
:::

::: {.column width="50%"}
```{.r}
df <- data.frame(
  Year = 2015:2022,
  GDP = c(100, 105, 109, 113, 
          118, 121, 119, 118)) 

df <- df |>            
  mutate(GDP_chg = GDP - lag(GDP),
         GDP_growth_pct = 
           100 * GDP_chg/GDP)
```
:::


::::

::::

:::

## Add new variables with `mutate()`
###  2. `ifelse()`

```{.r}
flight_season <- flights |> 
  mutate(summer_month = ifelse(month %in% c(6, 7, 8), 
                               TRUE, 
                               FALSE))
```

- To create new variables based on a condition, use `ifelse()` 
  - `ifelse(CONDITION, <if TRUE>, <else>)`



## Add new variables with `mutate()`
###  3. Ranking functions



```{.r}
rank_me <- data.frame( x = c(10, 5, 1, 5, 5, NA) )

rank_me_asce <- rank_me |> 
  mutate(x_min_rank = min_rank(x),
         x_dense_rank = dense_rank(x),
         x_row_number = row_number(x),
         x_perc_rank = percent_rank(x) )
         
rank_me_desc <- rank_me |> 
  mutate(x_min_rank = min_rank(-x), # instead of -x, we can use desc(x) 
         x_dense_rank = dense_rank(-x),
         x_row_number = row_number(-x), 
         x_perc_rank = percent_rank(-x) )
```

- To create new variables based on an order of values: `min_rank()`, `dense_rank()`,  `row_number()`, `percent_rank()`, and more




## Add new variables with `mutate()`
###  4. Other useful functions
```{.r}
df <- data.frame( x = c(1:10) ) |> 
  mutate(x_log = log(x),
         x_log10 = log10(x),
         x_exp = exp(x),
         x_sqrt = sqrt(x),
         x_sqrt_round = round(x_sqrt, 2),
         x_fct = factor(x),
         x_chr = as.character(x),
         x_num = as.numeric(x),
         x_int = as.integer(x) )
```


- We can use math functions as well as as.DATATYPE functions:
  - `log()`, `log10()`, `exp()`, `sqrt()`, `round(VAR, digit)`, `factor()`, `as.character()`, `as.numeric()`, `as.integer()`, and more





## Columns: `select()`, `rename()`, `relocate()`, and `mutate()`


Let's do [Classwork 10](https://bcdanl.github.io/200/danl-cw/danl-200-cw-10.html)!

