---
title: Lecture 7
subtitle: R Basics; Data Visualization
format:
  clean-revealjs:
    self-contained: true
    incremental: true
    code-annotations: hover

    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2024-02-13
execute: 
  eval: true
  echo: true
callout-icon: false

from: markdown+emoji

# bibliography: refs.bib
# include-after-body: backwards.html

---

```{r setup}
#| include: false
library(tidyverse)
library(skimr)
library(ggthemes)
library(hrbrthemes)


theme_set(theme_fivethirtyeight()+
          theme(strip.background =element_rect(fill="lightgray"),
                axis.title.x = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(10,0,0,0)),
                axis.title.y = 
                  element_text(angle = 0,
                               size = rel(1.5),
                               margin = margin(0,10,0,0)),
                axis.text.x = element_text(size = rel(1.5)),
                axis.text.y = element_text(size = rel(1.5)),
                strip.text = element_text(size = rel(1.5)),
                legend.position = "top",
                legend.text = element_text(size = rel(1.5)),
                legend.title = element_text(size = rel(1.5))
                )
          )
```


## Announcement
::: {.nonincremental}
- DANL Tutoring Schedule, Spring 2024


:::: {.columns}
::: {.column width="50%"}
- **Liza Mitchell**
  - Wednesday 9:00 AM – 10:00 AM
  - Friday 8:00 AM – 9:00 AM

- **Nada Trabelsi**
  - Tuesday 12:30 PM – 1:30 PM
  - Thursday 12:30 PM – 1:30 PM
  
:::

::: {.column width="50%"}

- **Daniel Noone**
  - Tuesday 5:00 PM - 6:00 PM
  - Thursday 5:00 PM - 6:00 PM	

- **Dominic Rodriguez-Donohue**
  - Tuesday 11:00 AM – 12:15 PM
  - Thursday 11:00 AM – 12:15 PM

:::



::::

:::

- Liza Mitchell's session on this Friday is cancelled.


## Learning Objectives


:::: {.columns}
::: {.column width="50%"}

- R Basics

:::

::: {.column width="50%"}

- Data Visualization with `ggplot()`

:::
::::




# R Basics  {background-color="#1c4982"}


## RStudio Workflow
### Must-know Quarto Shortcuts

::: {.nonincremental}

:::: {.columns}

::: {.column}
### Mac

  - **option+command+I**: to create a R chunk
  
  - **command+shift+return**: to run the code in the R chunk
  
  - **command + shift + K**: to render/knit the Quarto file
  
  - **command + shift + C**: to (de-)comment out a line in the Quarto file

:::

::: {.column}
### Windows

  - **Alt+Ctrl+I** : to create a R chunk
  
  - **Ctrl+Shift+Enter** : to run the code in the R chunk
  
  - **Ctrl + Shift + K**: to knit/render the Quarto file
  
  - **Ctrl + Shift + C**: to (de-)comment out a line in the Quarto file

:::

::::

:::

## RStudio Workflow
### Shortcuts for RStudio and RScript

::: {.nonincremental}

:::: {.columns}
::: {.column}
**Mac**

- **command + shift + N** opens a new RScript.
- **command + return** runs a current line or selected lines.
- **command + shift + C** is the shortcut for # (commenting).
- **option + - ** is the shortcut for `<-`.

:::

::: {.column}
**Windows**

- **Ctrl + Shift + N** opens a new RS-cript.
- **Ctrl + return** runs a current line or selected lines.
- **Ctrl + Shift + C** is the shortcut for # (commenting).
- **Alt + - ** is the shortcut for `<-`.

:::
::::

:::

## RStudio Workflow
### Shortcuts in RStudio and RScript

::: {.nonincremental}

- **Home/End** moves the blinking cursor bar to the beginning/End of the line.
  - **Ctrl** (**command** for Mac Users) **+** :arrow_left: and :arrow_right:  works too.

- **Ctrl** (**command** for Mac Users) **+ Z** undoes the previous action.
- **Ctrl** (**command** for Mac Users) **+ Shift + Z** redoes when undo is executed.

- **Ctrl** (**command** for Mac Users) **+ F** is useful when finding a phrase (and replace the phrase) in the RScript.

:::
    



## RStudio Workflow
### Adding Quotes in RStudio

- When adding the quotation marks to a character,
  - Step 1. Double click the character where you want to add the quotation marks
  - Step 2. Type the quotation mark only once.



## RStudio Workflow
### Computer Shortcuts
::: {.nonincremental}

:::: {.columns}
::: {.column width="50%"}
**Mac**

- **command + Z** undoes the previous action.

- **command + shift + Z** redoes when undo is executed.

- **command + Q** closes the current app.

:::

::: {.column width="50%"}
**Windows**

- **Crtl + Z** undoes the previous action.

- **Crtl + Shift + Z** redoes when undo is executed.

- **Alt + F4** closes the current app.

:::
::::
:::



## RStudio Workflow
### Cleaning R Environment and Console

::: {.nonincremental}

- `rm(OBJECT)` removes `OBJECT`.

- `rm(list = ls())` removes all the objects from the R environment.

- You can also click the broom button at the top right corner in the Environment Pane.

- **Ctrl + L** cleans the R console.

::: 





## R Basics
###  Values, Variables, and Types

::: {.nonincremental}
::: {.panel-tabset}

## Types

:::: {.columns}
::: {.column width="50%"}

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/r_variable_types.png">
</p>

:::

::: {.column width="50%"}
- **Logical**: `TRUE` or `FALSE`.
- **Numeric**: Numbers with decimals
- **Integer**: Integers
- **Character**: Text strings
- **Factor**: Categorical values. 
  - Each possible value of a factor is known as a *level*.

:::
::::



## Data containers

:::: {.columns}
::: {.column width="50%"}


<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/r_data_types_vdf.png" width="300px">
</p>

:::

::: {.column width="50%"}
- **vector**:	1D collection of variables of the *same* type
- **data.frame**:	2D collection of variables of *multiple* types
  - A data.frame is a collection of vectors.

:::

::::


:::

:::

## R Basics
### Functions

- A function can take any number and type of input *parameters* and **return** any number and type of output *results*.

- R ships a vast number of built-in functions. 

- R also allows a user to define a new function.

- We will mostly use built-in functions.



## R Basics
### Functions, Arguments, and Parameters

```{.r}
library(tidyverse)

# The function `str_c()`, provided by `tidyverse`, concatenates characters.
str_c("Data", "Analytics")
str_c("Data", "Analytics", sep = "!")
```


- We invoke a function by entering its name and a pair of opening and closing parentheses. 

- A function invocation can accept inputs called **arguments**. 

- We pass arguments sequentially inside the parentheses (, separated by commas).

- A **parameter** is a name given to an expected function argument.

- A *default argument* is a fallback value that R passes to a parameter if the function invocation does not explicitly provide one.



## R Basics
### R Variable and Data Types

- Question 2 in [Classwork 5](https://bcdanl.github.io/200/danl-cw/danl-200-cw-05.html)





## A Little Bit of Math for `log()`

::: {.panel-tabset}

## log functions
:::{.nonincremental}
- The logarithm function, $y = \log_{b}\,(\,x\,)$, looks like ....

:::

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/logarithm_plots.png">
</p>


## log examples
- $\log_{10}\,(\,100\,)$: the base $10$ logarithm of $100$ is $2$, because $10^{2} = 100$

- $\log_{e}\,(\,x\,)$: the base $e$ logarithm is called the natural log, where $e = 2.718\cdots$ is the mathematical constant,  the Euler's number.

- $\log\,(\,x\,)$ or $\ln\,(\,x\,)$: the natural log of $x$ .

- $\log_{e}\,(\,7.389\cdots\,)$: the natural log of $7.389\cdots$ is $2$, because $e^{2} = 7.389\cdots$.


:::


## Math functions
::: {.nonincremental}
- R has many built-in mathematical functions that facilitate calculations and data analysis.

:::

:::: {.columns}

::: {.column width="50%"}
```{.r}
5 * abs(-3)
sqrt(17) / 2
exp(3)
log(3)
log(exp(3))
exp(log(3))
```

:::


::: {.column width="50%"}
- `abs(x)`: the absolute value $|x|$ 
- `sqrt(x)`: the square root $\sqrt{x}$
- `exp(x)`: the exponential value $e^x$, where $e = 2.718...$
- `log(x)`: the natural logarithm $\log_{e}(x)$, or simply $\log(x)$

:::

::::





## R Basics
### Vectorized Operations

```{.r}
a <- c(1, 2, 3, 4, 5)
b <- c(5, 4, 3, 2, 1)

a + b
a - b
a * b
a / b
sqrt(a)
```

- Vectorized operations mean applying a function to every element of a vector without explicitly writing a loop. 
  - This is possible because most functions in R are vectorized, meaning they are designed to operate on vectors element-wise.
  - Vectorized operations are a powerful feature of R, enabling efficient and concise code for data analysis and manipulation.




## R Basics
### More Math Functions

```{.r}
x <- c(1, 2, 3, 4, 5)

sum(x)
mean(x)
sd(x)
```

:::{.nonincremental}
::: {.panel-tabset}

## Sum

- `sum()` calculates the sum of all numbers in a vector.

## Mean

- `mean()` calculates the arithmetic mean of the values in a vector.
$$
\overline{x} = \frac{x_{1} + x_{2} + \cdots + x_{N}}{N}
$$

## Standard Deviation

- `sd()` calculates the standard deviation (SD) of the values in a vector. 
  - SD measures the amount of variation or dispersion of a set of values.
$$
\overline{s} = \sqrt{  \frac{(x_{1}-\overline{x})^{2} + (x_{2}-\overline{x})^{2} + \cdots + (x_{N}-\overline{x})^{2}}{N-1}\;\,  }
$$

:::
:::

## R Basics
### `NULL` and `NA` values


```{.r}
c(c(), 1, NULL)
c("a", NA, "c")
```


- `NULL` is just an alias for `c()`, the empty vector.
- `NA` indicates missing or unavailable data.


## R Basics
### `NULL` and `NA` values
::: {.nonincremental}
- `is.na()` is to check whether expression evaluates to `NA`.

:::

```{.r}
is.na(NA)
is.na(c())
is.na("A")
```


- **Q**. Why does `"A" == NA` evaluate to `NA`?


## R Basics
###  Casting Variables

:::: {.columns}
::: {.column width="50%"}
```{.r}
orig_number <- 4.39898498
class(orig_number)
mod_number <- as.integer(orig_number)
class(mod_number)
```
:::

::: {.column width="50%"}

```{.r}
# TRUE converts to 1; 
# FALSE does to 0.
as.numeric(TRUE)
as.numeric(FALSE)
```
:::
::::


- Sometimes we need to explicitly cast a value from one type to another. 

  - We can do this using built-in functions like `as.character()`, `as.integer()`, `as.numeric()`, and `as.factor()`. 
  - If we try these, R will do its best to interpret the input and convert it to the output type we'd like and, if they can't, the code will throw `NA`.




## R Basics
### Absolute vs. Relative Pathnames

::: {.panel-tabset}

## Absolute Path

- Complete path from the root directory to the target file or directory.
- Independent of the current working directory.

- *Example (Mac)*: `/Users/user/documents/car_data.csv`
- *Example (Windows)*: `C:\\Users\\user\\Documents\\car_data.csv`


## Relative Path

- Path relative to the current working directory.
- Changes based on the current directory.
<!-- - Uses '.' for current directory and '..' for parent directory. -->
- *Example (Mac)*: If the current directory is `/Users/user`, the relative path to `car_data.csv` would be `documents/car_data.csv`
- *Example (Windows)*: If the current directory is `C:\\Users\\user`, the relative path to `car_data.csv` would be `Documents\\car_data.csv`
- For the website R project, we can use a **relative path**.

:::


## R Basics
### Working with Data from Files


:::{.nonincremental}
- We use the `read_csv()` function to read a comma-separated values (CSV) file.

1. Download the CSV file, `car_data.csv` from the Class Files module in our Brightspace.

2. Find the path name for the file, `car_data.csv` from the File Explorer / Finder.

3. Provide the path name for the file, `car_data.csv`, to the `read_csv()` function.

```{.r}
uciCar <- read_csv('HERE WE PROVIDE A PATHNAME FOR car_data.csv')
View(uciCar)
```

- `View()`/`view()` displays the data in a simple spreadsheet-like grid viewer.

:::



## R Basics
### Examining data.frames


:::: {.columns}
::: {.column width="50%"}
```{.r}
dim(uciCar)
nrow(uciCar)
ncol(uciCar)
```
:::

::: {.column width="50%"}
```{.r}
class(uciCar)
library(skimr)
skim(uciCar)
```
:::

::::

- `dim()` shows how many rows and columns are in the data for `data.frame`.
- `nrow()` and `ncol()` shows the number of rows and columns for `data.frame` respectively.
- `skimr::skim()` provides a more detailed summary.
  - `skimr` is the R package that provides the function `skim()`.



## R Basics
### Reading data.frames from an URL


```{.r}
tvshows <- read_csv(
		'https://bcdanl.github.io/data/tvshows.csv')
```

- We can import the CSV file from the web.


## R Basics
### Tidy `data.frame`: Variables, Observations, and Values


<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/tidy-1.png">
</p>


- There are three rules which make a `data.frame` tidy:

  1. Each **variable** must have its own *column*.
  2. Each **observation** must have its own *row*.
  3. Each **value** must have its own *cell*.





## R Basics
### R Variable and Data Types

- Questions 3-5 in [Classwork 5](https://bcdanl.github.io/200/danl-cw/danl-200-cw-05.html)



# Data Visualization with `ggplot()` {background-color="#1c4982"}

## Exploratory Data Analysis

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/data-science-explore.png">
</p>



- In data visualization, you'll turn data into plots.

- In data transformation, you'll learn the key verbs that allow you to select important variables, filter out key observations, create new variables, and compute summaries.

- In **exploratory data analysis**, you'll combine summary statistics (`skim()`), visualization, and transformation with your curiosity and skepticism to ask and answer interesting questions about data.



## Data visualization

> *"The simple graph has brought more information to the data analyst's mind than any other device."  John Tukey*

- Data visualization is the creation and study of the visual representation of data

- Many tools for visualizing data -- R is one of them

- Many approaches/systems within R for making data visualizations -- **ggplot2** is one of them, and that's what we're going to use



## Grammar of Graphics

:::: {.columns}
::: {.column width="40%"}

A **grammar of graphics** is a tool that enables us to concisely describe the components of a graphic
:::

::: {.column width="60%"}

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/grammar-of-graphics.png">
</p>
:::

::::

## Data Visualization - First Steps

```{.r}
library(tidyverse)
mpg
?mpg
```

- The `mpg` data frame, provided by `ggplot2`, contains observations collected by the US Environmental Protection Agency on 38 models of car.

- Q. Do cars with big engines use more fuel than cars with small engines?
  - `displ`: a car's engine size, in liters.
  - `hwy`: a car's fuel efficiency on the highway, in miles per gallon (mpg). 


-  What does the relationship between engine size and fuel efficiency look like?


## Data Visualization - First Steps
### Creating a `ggplot`


```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy) )
```


- To plot `mpg`, run the above code to put `displ` on the `x`-axis and `hwy` on the `y`-axis.


## Data Visualization - First Steps
### Graphing Template

```{.r}
ggplot(data = <DATA>) + 
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
```


- To make a ggplot plot, replace the bracketed sections in the code below with a `data.frame`, a `geom` function, or a collection of mappings such as `x = VAR_1` and `y = VAR_2`.




## R Basics
### R Variable and Data Types

- Question 1 in [Classwork 6](https://bcdanl.github.io/200/danl-cw/danl-200-cw-06.html)



## Aesthetic Mappings {background-color="#1c4982"}


## Aesthetic Mappings

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/r4s_330_1.png" width="600px">
</p>



- In the plot above, one group of points (highlighted in red) seems to fall outside of the linear trend. 

  - How can you explain these cars? Are those hybrids?



## Aesthetic Mappings


<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/r4s_330_2.png" width="600px">
</p>

- An aesthetic is a visual property (e.g., `size`, `shape`, `color`) of the objects (e.g., `class`) in your plot.

- You can display a point in different ways by changing the values of its aesthetic properties. 

## Aesthetic Mappings
### Adding a `color` to the plot


```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy, 
                   color = class) )
```


## Aesthetic Mappings
### Adding a `shape` to the plot

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment


ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy, 
                   shape = class) )
```




## Aesthetic Mappings
### Adding a `size` to the plot


```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy, 
                   size = class) )
```




## Aesthetic Mappings
### Adding an `alpha` (transparency) to the plot


```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy, 
                   alpha = class) )
```



## Aesthetic Mappings
### Overplotting problem

- Many points overlap each other. 
  - This problem is known as **overplotting**. 


- When points overlap, it's hard to know how many data points are at a particular location. 


- Overplotting can obscure patterns and outliers, leading to potentially misleading conclusions. 

- We can set a transparency level (`alpha`) between 0 (full transparency) and 1 (no transparency).


## Aesthetic Mappings
### Overplotting and `alpha`

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment


ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy),
             alpha = .2)
```




## Aesthetic Mappings
### Specifying a `color` to the plot

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy), 
             color = "blue")
```




## Aesthetic Mappings

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/r4s_330_3.png" width="600px">
</p>


- To set an aesthetic manually, set the aesthetic by name as an argument of your `geom_` function; i.e. it goes outside of `aes()`. 
  - You'll need to pick a level that makes sense for that aesthetic:
    - The name of a `color` as a *character string*.
    - The `size` of a point in *mm*.
    - The `shape` of a point as a *number*, as shown below.
  



## Aesthetic Mappings
### Specifying a `color` to the plot?

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = mpg) + 
  geom_point( mapping = 
                aes(x = displ, 
                    y = hwy, 
                    color = "blue") )
```





## Common problems in `ggplot()`


```{r}
#| eval: false

ggplot(data = mpg) 
 + geom_point( mapping = 
                 aes(x = displ, 
                     y = hwy) )
```

- One common problem when creating `ggplot2` graphics is to put the `+` in the wrong place.




## R Basics
### R Variable and Data Types

- Question 2 in [Classwork 6](https://bcdanl.github.io/200/danl-cw/danl-200-cw-06.html)


# Facets {background-color="#1c4982"}

## Facets 

- One way to add a variable, particularly useful for categorical variables, is to use **facets** to split our plot into facets, subplots that each display one subset of the data.


## Facets 


```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy), 
             alpha = .5) + 
  facet_wrap( . ~ class, nrow = 2)
```


- To facet our plot by a *single variable*, use `facet_wrap()`.


## Facets 

- To facet our plot on the combination of *two variables*, add `facet_grid( VAR_ROW ~ VAR_COL )` to our plot call.


## Facets 

- The first argument of `facet_grid()` is also a formula. 
  - This time the formula should contain two variable names separated by a `~`.


## Facets 

```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy),
             alpha = .5) + 
  facet_grid(drv ~ cyl)
```




## Facets 

- Option `scales` in `facet_*()` is whether scales is 
  - fixed (`"fixed"`, the default),
  - free in one dimension (`"free_x"`, `"free_y"`), or
  - free in two dimensions (`"free"`).



## Facets 


```{r}
#| echo: true
#| fig-asp: .85
#| output-location: column-fragment

ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy),
             alpha = .5) + 
  facet_grid(drv ~ cyl, 
             scales = "free_x")
```





## R Basics
### R Variable and Data Types

- Question 3 in [Classwork 6](https://bcdanl.github.io/200/danl-cw/danl-200-cw-06.html)





<script>
document.addEventListener('wheel', function(event) {
    if (event.deltaY > 0) {
        Reveal.next(); // Scroll down to go to the next slide
    } else {
        Reveal.prev(); // Scroll up to go to the previous slide
    }
}, false);

window.onload = function() {
    document.querySelectorAll('a').forEach(function(link) {
        link.setAttribute('target', '_blank');
    });
};

document.addEventListener('DOMContentLoaded', function() {
  // Query all anchor tags within code blocks (adjust the selector as needed)
  document.querySelectorAll('pre code a').forEach(function(element) {
    element.addEventListener('click', function(e) {
      e.preventDefault(); // Prevent the default anchor action
      e.stopPropagation(); // Stop the event from bubbling up
    });
  });
});

document.addEventListener('DOMContentLoaded', function() {
    // Target all span elements within code blocks that have IDs starting with 'cb'
    document.querySelectorAll('pre code span[id^="cb"]').forEach(function(element) {
        element.addEventListener('mouseenter', function() {
            // Apply yellow background color to the hovered span element
            this.style.backgroundColor = '#FFFF99';
        });
        element.addEventListener('mouseleave', function() {
            // Revert the background color when the mouse leaves the span element
            this.style.backgroundColor = '';
        });
    });
});


</script>