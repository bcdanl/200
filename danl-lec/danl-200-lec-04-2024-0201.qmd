---
title: Lecture 4
subtitle: Installing the DANL Tools
format:
  clean-revealjs:
    self-contained: true
    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2024-02-01
execute: 
  eval: false
  echo: true
callout-icon: false

from: markdown+emoji

# bibliography: refs.bib
# include-after-body: backwards.html
---


```{r setup}
#| include: false
#| eval: true

library(knitr)
library(tidyverse)
# set default options
opts_chunk$set(echo = FALSE,
               fig.width = 7.252,
               fig.height = 4,
               comment = "#",
               dpi = 300)

knitr::knit_engines$set("markdown")
```


## Announcement
### GitHub Notifications Setting

::: {.panel-tabset}

### Steps
- If you want to avoid a ton of notification emails,
  1. Go to [https://github.com](https://github.com), and log in.
  2. Click the mailbox icon at the top right corner next to the profile icon.
    <!-- - This leads to the page of [GitHub Notifications](https://github.com/notifications). -->
  3. Click "Manage notifications" at the bottom of the side bar.
  4. Click "Notification settings".
  5. Scroll down to the "Subscriptions" menu.
  6. Click "Notify me on ..." from the "Watching" sub-menu, uncheck "Email", and save it.
  7. Click "Notify me on ..." from the "Participating, ..." sub-menu, uncheck "Email", and save it.

### gif description



<p align="center" >
  <img src="https://bcdanl.github.io/lec_figs/github-notification.gif" style="width: 50%;">
</p>
:::





## Tasks & Objectives


:::: {.columns}
::: {.column width="50%"}

- Setting up the DANL tools
  - R/RStudio or Posit Cloud
  - `tidyverse` Package
  - Personal Website

:::

::: {.column width="50%"}

- Learning
  - Markdown Basics
  - R Basics

:::
::::



## RStudio Workflow
### Shortcuts for RStudio and RScript


:::: {.columns}
::: {.column width="50%"}
**Mac**

- **command + shift + N** opens a new RScript.
- **command + return** runs a current line or selected lines.
- **command + shift + C** is the shortcut for # (commenting).
- **option + - ** is the shortcut for `<-`.

:::

::: {.column width="50%"}

**Windows**

- **Ctrl + Shift + N** opens a new RScript.
- **Ctrl + return** runs a current line or selected lines.
- **Ctrl + Shift + C** is the shortcut for # (commenting).
- **Alt + - ** is the shortcut for `<-`.

:::
::::




## Workflow
### Shortcuts for Lecture Slides

- **o** or **Esc** overviews lecture slides
  - Use arrow keys to move around.
  
- You can also click the menu button at the top-right corner, and go to a specific slide.
 
 - **Ctrl + Shift + F** to search.



## Posit Cloud

- Posit Cloud is a cloud version of RStudio, and it has a free version.

- Posit Cloud is a good option for those who could not install `tidyverse` package on a laptop. 

- Regarding the website building and management, Posit Cloud users should follow the instruction in [Classwork 2](https://bcdanl.github.io/200/danl-cw/danl-200-cw-02.html#posit-cloud).

- Regarding local data files, Posit Cloud users needs to upload them on a RStudio cloud project.




# Installing the Tools {background-color="#1c4982"}


## Installing the Tools
### Building a Website

- Let's do [Classwork 2](https://bcdanl.github.io/200/danl-cw/danl-200-cw-02.html) if you have not finished it up.


## Installing the Tools
### Practice Markdown

- Quarto and GitHub-based Discussion Boards use **markdown** as its underlying document syntax.

- Let's do [Classwork 3](https://bcdanl.github.io/200/danl-cw/danl-200-cw-03.html).



# Getting Started with Quarto {background-color="#1c4982"}


## Getting Started with Quarto
### YAML


:::: {.columns}
::: {.column width="25%"}
![](https://bcdanl.github.io/lec_figs/quarto-yml-engine.jpg){width="75%"}
:::


::: {.column width="70%"}

:::{}
- An YAML (yet another markup language) header surrounded by `---`.
  - It is commonly used for document configuration (e.g., title, author, date, style, ...).

- Chunks of Python/R code surrounded by three backticks, $\text{```}$.

:::

:::
::::



## Getting Started with Quarto
### Knitting / Rendering

- When we knit the document, Quarto sends the `.qmd` file to **jupyter**/**knitr**, which executes all of the code chunks and creates a new markdown (`.md`) document which includes the code and its output. 

- The markdown file (`*.md`) generated by **jupyter**/**knitr** is then processed by **pandoc**, which is responsible for creating the output file.

![](https://bcdanl.github.io/lec_figs/quarto-flow.png)





## Getting Started with Quarto
### Markdown, Quarto, and HTML

:::{.incremental}
- The very original version of **Markdown** was invented mainly to write HTML content more easily.
  - For example, `- SOME_TEXT` in "*.md" is equivalent to `<ul><li> SOME_TEXT </li>` in "*.html"
  
  
- Pandoc makes it possible to convert a Markdown document to a large variety of output formats, such as HTML.

:::

## Getting Started with Quarto and HTML
### Markdown, Quarto, and HTML
:::{.incremental}

- To create an HTML document from Quarto, we specify the `html` output format in the YAML metadata of our document.
  - By default, `format: html` is set.

- In RStudio, we can create a new Quarto file from the menu, File -> New File -> Quarto Document.

- Open an empty Quarto file.
  - Type the following YAML metadata to the empty Quarto file.

:::

```{.bash}
---
title: "Habits"
author: YOUR_NAME
date: January 30, 2024
format: 
  html
---
```





## Getting Started with Quarto
### Quarto Basics

:::{.incremental}
- In RStudio, close the project `USERNAME.github.io.Rporj` if it is on.
  1. Click `USERNAME.github.io.Rporj` at the top-right corner.
  2. Click *Close Project*.
  

- Download the Quarto file, `danl-200-quarto.qmd` from Brightspace, and open it from RStudio.

:::


## Getting Started with Quarto
### Quarto Basics

- The following syntax is part of YAML metadata in `danl-200-quarto.qmd`.
  - In YAML, indentation really matters!
  - **tab** (or four spaces) defines a level in YAML.

```{.bash}
---
title: 
subtitle: 
author: 
date: last-modified

format: 
  html:
  
execute: 
  echo: true
  eval: true
---
```




# Managing a Website with Quarto {background-color="#1c4982"}

## Quarto Websites


- In RStudio, open the project `USERNAME.github.io.Rporj`.
  1. Click `Project: (None)` at the top-right corner.
  2. Click `USERNAME.github.io.Rporj`.


- Your website has a `_quarto.yml` configuration file.
  - This file provides options for HTML documents within the website.


:::: {.columns}
::: {.column width="50%"}
```{.bash}
---
project:
  type: website

website:
  title: "YOUR NAME"
  navbar:
    left:
      - text: Project
        href: project.qmd
      - text: Blog
        href: blog-listing.qmd
```

:::

::: {.column width="50%"}

```{.bash}
format:
  html:
    theme: cosmo
    css: styles.css
    toc: false
---
```

- The `_quarto.yml` file configures the website settings.

- Indentation matters!

:::

::::



## Quarto Websites
### Custom CSS
:::{.incremental}
- Cascading Style Sheets (CSS) is used to format the layout of a webpage (color, font, text size, background, display, etc.). 

  - HTML will format the architecture of the house.
  
  - CSS will be the carpet and walls to decorate the house.
  
  - JavaScript (`*.js`) adds interactive elements in the house, such as opening doors and lighting.

  
- We are not front-end web developers. 

  - We will not cover discuss the use of CSS and JavaScript.

:::

## Quarto Websites
### Rendering
:::{.incremental}
- The **Render** button (**command/Ctrl + shift + K**) renders a single Quarto file.

- `quarto render` from Terminal renders all Quarto files in your local working directory:

```{.bash}
quarto render
```

- We should use `quarto render` when we have changes in `_quarto.yml`.

- Make changes only from your local laptop. 
  - Do not make any change from the GitHub repo webpage.

:::



## Quarto Websites
### Appearance and Style

- `theme` specifies the Bootstrap theme to use for the page (themes are drawn from the [Bootswatch](https://bootswatch.com) theme library).
  - Valid themes include `default`, `bootstrap`, `cerulean`, `cosmo`, `darkly`, `flatly`, `journal`, `lumen`, `paper`, `readable`, `sandstone`, `simplex`, `spacelab`, `united`, and `yeti`. 

  
- `highlight-style` specifies the code highlighting style. 
  - Supported styles include `default`, `tango`, `pygments`, `kate`, `monochrome`, `espresso`, `zenburn`, `haddock`, `breezedark`, and `textmate`. 



## Quarto Websites
### About

- Your `index.qmd` sets a page about you.
  - Details in about pages are available here:
  - [https://quarto.org/docs/websites/website-about.html](https://quarto.org/docs/websites/website-about.html).


- Quarto includes 5 built in templates:
  - `jolla`
  - `trestles`
  - `solana`
  - `marquee`
  - `broadside`



## Quarto Websites
### Icons and Emojis

- A ton of Bootstrap icons are available here:
  - [https://icons.getbootstrap.com](https://icons.getbootstrap.com).


- A ton of markdown emojis are available here `r emo::ji('smile')`:
  - [https://github.com/ikatyang/emoji-cheat-sheet](https://github.com/ikatyang/emoji-cheat-sheet)
  - [https://gist.github.com/rxaviers/7360908](https://gist.github.com/rxaviers/7360908)




## Quarto Websites
### Naviation and Adding Pages

- We can add a new page to the website through `navbar` in `_quarto.yml`

```{.bash}
left:
- text: Project
  href: project.qmd
- text: Blog
  href: blog-listing.qmd
- text: Homeowrk
  href: hw.qmd
```




## Quarto Websites
### Naviation and Adding Pages

- We can also create a navigation bar menu by including a `menu`

```{.bash}
left:
  - text: "Projects"
    menu:
      - project_1.qmd
      - project_2.qmd 
```


- More details about navbar are available here:
  - [https://quarto.org/docs/websites/website-navigation.html](https://quarto.org/docs/websites/website-navigation.html)




## Quarto Websites  {background-color="#6497b1"}
### Colors


- A ton of hex codes for colors are available here:
  - [https://www.color-hex.com](https://www.color-hex.com)




## Website Basics

- Let's do [Classwork 4](https://bcdanl.github.io/200/danl-cw/danl-200-cw-04.html).




<script>
document.addEventListener('wheel', function(event) {
    if (event.deltaY > 0) {
        Reveal.next(); // Scroll down to go to the next slide
    } else {
        Reveal.prev(); // Scroll up to go to the previous slide
    }
}, false);

window.onload = function() {
    document.querySelectorAll('a').forEach(function(link) {
        link.setAttribute('target', '_blank');
    });
};

</script>