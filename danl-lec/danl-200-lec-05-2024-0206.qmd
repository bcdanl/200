---
title: Lecture 5
subtitle: Website Basics; R Basics
format:
  clean-revealjs:
    self-contained: true
    incremental: true
    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2024-02-06
execute: 
  eval: false
  echo: true
callout-icon: false

from: markdown+emoji

# bibliography: refs.bib
# include-after-body: backwards.html
---


```{r setup}
#| include: false
#| eval: true

library(knitr)
library(tidyverse)
# set default options
opts_chunk$set(echo = FALSE,
               fig.width = 7.252,
               fig.height = 4,
               comment = "#",
               dpi = 300)

knitr::knit_engines$set("markdown")
```



## Announcement
::: {.nonincremental}
- DANL Tutoring Schedule, Spring 2024


:::: {.columns}
::: {.column width="50%"}
- Liza Mitchell
  - Wednesday 9:00 AM – 10:00 AM
  - Friday 8:00 AM – 9:00 AM

- Nada Trabelsi
  - Tuesday 12:30 PM – 1:30 PM
  - Thursday 12:30 PM – 1:30 PM
  
:::

::: {.column width="50%"}

- Daniel Noone
  - Tuesday 5:00 PM - 6:00 PM
  - Thursday 5:00 PM - 6:00 PM	

- Dominic Rodriguez-Donohue
  - Tuesday 11:00 AM – 12:15 PM
  - Thursday 11:00 AM – 12:15 PM

:::

- Daniel Noone's tutoring session today (February 6, 2024) is cancelled.


::::

:::



## Tasks & Objectives


:::: {.columns}
::: {.column width="50%"}

- Setting up the DANL tools
  - R/RStudio or Posit Cloud
  - `tidyverse` Package
  - Personal Website

:::

::: {.column width="50%"}

- Learning
  - Website Basics
  - R Basics

:::
::::





# Getting Started with Quarto {background-color="#1c4982"}


## Getting Started with Quarto
### YAML


:::: {.columns}
::: {.column width="25%"}
![](https://bcdanl.github.io/lec_figs/quarto-yml-engine.jpg){width="75%"}
:::


::: {.column width="70%"}

:::{}
- An YAML (yet another markup language) header surrounded by ``.
  - It is commonly used for document configuration (e.g., title, author, date, style, ...).

- Chunks of R code surrounded by three backticks, $\text{```}$.

:::

:::
::::



## Getting Started with Quarto
### Knitting / Rendering

![](https://bcdanl.github.io/lec_figs/quarto-flow.png)


- When we knit the document, Quarto sends the `.qmd` file to **knitr**, which executes all of the code chunks and creates a new markdown (`.md`) document which includes the code and its output. 

- The markdown file (`*.md`) generated by **knitr** is then processed by **pandoc**, which is responsible for creating the output file.





## Getting Started with Quarto
### Markdown, Quarto, and HTML

:::{}
- The very original version of **Markdown** was invented mainly to write HTML content more easily.
  - For example, `- SOME_TEXT` in "*.md" is equivalent to `<ul><li> SOME_TEXT </li>` in "*.html"
  
  
- Pandoc makes it possible to convert a Markdown document to a large variety of output formats, such as HTML.

:::

## Getting Started with Quarto and HTML
### Markdown, Quarto, and HTML


```{.bash}
title: "Habits"
author: YOUR_NAME
date: January 30, 2024
format: 
  html
```



:::{}

- To create an HTML document from Quarto, we specify the `html` output format in the YAML metadata of our document.
  - By default, `format: html` is set.

- In RStudio, we can create a new Quarto file from the menu, 
  - *File* -> *New File* -> *Quarto Document*.

- Open an empty Quarto file.
  - Type the above YAML metadata to the empty Quarto file.
  - In YAML, indentation really matters!
    - **tab** (or four spaces) defines a level in YAML.
    
:::




## Getting Started with Quarto
### Quarto Basics

:::{}
- In RStudio, close the project `USERNAME.github.io.Rporj` if it is on.
  1. Click `USERNAME.github.io.Rporj` at the top-right corner.
  2. Click *Close Project*.
  

- Download the Quarto file, `danl-200-quarto.qmd` from Brightspace, and open it from RStudio.

:::


## Getting Started with Quarto
### Quarto Basics


```{.bash}
title: 
subtitle: 
author: 
date: last-modified

format: 
  html:
  
execute: 
  echo: true
  eval: true

```


- The above syntax is part of YAML metadata in `danl-210-quarto.qmd`.
  



## Getting Started with Quarto
### Workflow: Shortcuts for Quarto Document


:::: {.columns}
::: {.column width="50%"}
**Mac**

- **command + shift + K** renders a Quarto document.
- **option + command + I** create a code block.
- **command + return** runs a current line of code.
- **command + shift + C** is the shortcut for # (commenting).

:::

::: {.column width="50%"}

**Windows**

- **Ctrl + Shift + K** renders a Quarto document.
- **Alt + Ctrl + I** create a code block.
- **Ctrl + Enter** runs a current line of code.
- **Ctrl + Shift + C** is the shortcut for # (commenting).

:::
::::




# Managing a Website with Quarto {background-color="#1c4982"}

## Managing a Website with Quarto


:::: {.columns}
::: {.column width="50%"}
```{.bash}

project:
  type: website

website:
  title: "YOUR NAME"
  navbar:
    left:
      - text: Project
        href: project.qmd
      - text: Blog
        href: blog-listing.qmd
```

:::

::: {.column width="50%"}

```{.bash}
format:
  html:
    theme: cosmo
    css: styles.css
    toc: false

```

- The `_quarto.yml` file configures the website settings.

- Indentation matters!

:::

::::


- In RStudio, open the project `USERNAME.github.io.Rporj`.
  1. Click `Project: (None)` at the top-right corner.
  2. Click `USERNAME.github.io.Rporj`.


- Your website has a `_quarto.yml` configuration file.
  - This file provides options for HTML documents within the website.



## Quarto Websites
### Custom CSS
:::{}
- Cascading Style Sheets (CSS) is used to format the layout of a webpage (color, font, text size, background, display, etc.). 
  - HTML will format the architecture of the house.
  - CSS will be the carpet and walls to decorate the house.
  - JavaScript (`*.js`) adds interactive elements in the house, such as opening doors and lighting.

- We are not front-end web developers. 
  - We will not cover discuss the use of CSS and JavaScript.

:::

## Quarto Websites
### Rendering


```{.bash}
quarto render
```


:::{}

- `quarto render` from Terminal renders all Quarto files in your local working directory:

- We should use `quarto render` when we have changes in `_quarto.yml`.

- The **Render** button (**command/Ctrl + shift + K**) renders (1) a single Quarto file or (2) Quarto files that have changes but have not rendered yet.

:::


## Quarto Websites
### Updating a Website


- Make changes only from your local laptop (or Posit Cloud). 

  - Do not make any change from the GitHub repo webpage.



## Quarto Websites
### Appearance and Style

- `theme` specifies the Bootstrap theme to use for the page (themes are drawn from the [Bootswatch](https://bootswatch.com) theme library).
  - Valid themes include `default`, `bootstrap`, `cerulean`, `cosmo`, `darkly`, `flatly`, `journal`, `lumen`, `paper`, `readable`, `sandstone`, `simplex`, `spacelab`, `united`, and `yeti`. 

  
- `highlight-style` specifies the code highlighting style. 
  - Supported styles include `default`, `tango`, `pygments`, `kate`, `monochrome`, `espresso`, `zenburn`, `haddock`, `breezedark`, and `textmate`. 



## Quarto Websites
### About

- Your `index.qmd` sets a page about you.
  - Details in about pages are available [**here**](https://quarto.org/docs/websites/website-about.html):


- Quarto includes 5 built in templates:
  - `jolla`
  - `trestles`
  - `solana`
  - `marquee`
  - `broadside`



## Quarto Websites
### Icons and Emojis

- A ton of Bootstrap icons are available [**here**](https://icons.getbootstrap.com):



- A ton of markdown emojis are available 
  - [**here**](https://github.com/ikatyang/emoji-cheat-sheet) `r emo::ji('smile')`:
  - [**here**](https://gist.github.com/rxaviers/7360908) `r emo::ji('smile')`:





## Quarto Websites
### Naviation and Adding Pages


```{.bash}
left:
- text: Project
  href: project.qmd
- text: Blog
  href: blog-listing.qmd
- text: Homeowrk
  href: hw.qmd
```

- We can add a new page to the website through `navbar` in `_quarto.yml`



## Quarto Websites
### Naviation and Adding Pages


```{.bash}
left:
  - text: "Projects"
    menu:
      - project_1.qmd
      - project_2.qmd 
```

- We can also create a navigation bar menu by including a `menu`

- More details about navbar are available [**here**](https://quarto.org/docs/websites/website-navigation.html)




## Quarto Websites  {background-color="#6497b1"}
### Colors


- A ton of hex codes for colors are available [**here**](https://www.color-hex.com)




## Website Basics

- Let's do [Classwork 4](https://bcdanl.github.io/200/danl-cw/danl-200-cw-04.html).





# R Basics  {background-color="#1c4982"}



## R Basics
### RStudio Environment

:::: {.columns}
::: {.column width="50%"}

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/rstudio_env.png">
</p>


:::

::: {.column width="50%"}

- **Script Pane** is where you write R commands in a script file that you can save. 
  - An R script is simply a text file containing R commands. 
  - RStudio will color-code different elements of your code to make it easier to read.

:::
::::

## R Basics
### RStudio Environment

:::: {.columns}
::: {.column width="50%"}
<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/rstudio_env.png">
</p>

:::

::: {.column width="50%"}

- **Console Pane** allows you to interact directly with the R interpreter and type commands where R will immediately execute them.

:::
::::

## R Basics
### RStudio Environment

:::: {.columns}
::: {.column width="50%"}
<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/rstudio_env.png">
</p>
:::

::: {.column width="50%"}

- **Environment Pane** is where you can see the values of variables, data frames, and other objects that are currently stored in memory.

:::
::::

## R Basics
### RStudio Environment
::: {.column width="50%"}
<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/rstudio_env.png">
</p>
:::

::: {.column width="50%"}
- **Plots Pane** contains any graphics that you generate from your R code.

:::



## R Basics
### Workflow: Code and comment style
- The two main principles for coding and managing data are:
  - Make things easier for your future self.
  - Don't trust your future self.


- The `#` mark is R's comment character.
  - In R scripts (`*.R` files), `#` indicates that the rest of the line is to be ignored.
  - Write comments before the line that you want the comment to apply to.


- When using Quarto, use Markdown to explain data analysis and code chunks.









## R Basics
### Workflow: Shortcuts in RStudio

:::: {.columns}
::: {.column width="50%"}
**Mac**

- **command + shift + N** opens a new RScript.
- **command + return** runs a current line or selected lines.
- **command + shift + C** is the shortcut for # (commenting).
- **option + - ** is the shortcut for `<-`.

:::

::: {.column width="50%"}
**Windows**

- **Ctrl + Shift + N** opens a new RS-cript.
- **Ctrl + return** runs a current line or selected lines.
- **Ctrl + Shift + C** is the shortcut for # (commenting).
- **Alt + - ** is the shortcut for `<-`.

:::

::::


## R Basics
### Workflow: Shortcuts in RStudio

- **Home/End** moves the blinking cursor bar to the beginning/End of the line.
  - **Ctrl** (**command** for Mac Users) **+** :arrow_left: and :arrow_right:  works too.


- **Ctrl** (**command** for Mac Users) **+ Z** undoes the previous action.
- **Ctrl** (**command** for Mac Users) **+ Shift + Z** redoes when undo is executed.


- **Ctrl** (**command** for Mac Users) **+ F** is useful when finding a phrase (and replace the phrase) in the RScript.




## R Basics
### Workflow: Auto-completion
:::: {.columns}
::: {.column width="50%"}
```{r, echo = T, eval = F}
libr
```
:::

::: {.column width="50%"}

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/auto-completionRStudio.png">
</p>

:::

::::


- Auto-completion of command is useful.
  - Type `libr` in the RScript in RStudio and wait for a second.



## R Basics
### Workflow: STOP icon


<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/console-running.png">
</p>


- When the code is running, RStudio shows the STOP icon ( 🛑 ) at the top right corner in the Console Pane.
  - Do not click it unless if you want to stop running the code.
  
  

## R Basics
### Workflow: Quotation marks, parentheses, and `+`


```{r, echo = T, eval = F}
> x <- "hello
```


- Quotation marks and parentheses must always come in a pair.
  - If not, Console Pane will show you the continuation character `+`:
  
- The `+` tells you that R is waiting for more input; it doesn’t think you’re done yet. 



## R Basics
### Assignment

```{r, echo = T, eval = F}
x <- 2
x < - 3
print(x)

x <- 5
x = 5
5 -> x
```


- R has many assignment operators (e.g., `<-`, `=`, `->` ).
- The preferred one is `<-`.


## R Basics
### R variables and data types

- **Variables** can be thought of as a labelled container used to store information. 

- Variables allow us to recall saved information to later use in calculations. 

- Variables can store many different things in RStudio, from single values, data.frames, to ggplot2 objects.




## R Basics
### R variables and data types

::: {.panel-tabset}

## variable types

:::: {.columns}
::: {.column width="50%"}

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/r_variable_types.png">
</p>

:::

::: {.column width="50%"}
  - **Logical**: TRUE or FALSE.
  - **Numeric**: Decimal numbers
  - **Integer**: Integers
  - **Character**: Text strings
  - **Factor**: Categorical values. Each possible value of a factor is known as a *level*.

:::
::::



## data types

:::: {.columns}
::: {.column width="50%"}


<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/r_data_types.png">
</p>

:::

::: {.column width="50%"}
- **vector**:	1D collection of variables of the same type
- **matrix**:	2D collection of variables of the same type
- **data.frame**:	2D collection of variables of multiple types

:::

::::


:::


## R Basics
### R variable and data types


::: {.panel-tabset}

## Character

```{r, echo = T, eval = F}
myname <- "my_name"
class(myname)

```


- Strings are known as “character” in R. 
- Use the double quotes " or single quotes ' to wrap around the string

- `class()` function returns the data type of an object.



## Numbers

```{r, echo = T, eval = F}
favorite.integer <- as.integer(2)
print(favorite.integer)
class(favorite.integer)

favorite.numeric <- as.numeric(8.8)
print(favorite.numeric)
class(favorite.numeric)

pvalue.threshold <- 0.05
```


- Numbers have different classes. 
  - The most common two are integer and numeric. Integers are whole numbers.


## Logical (TRUE/FALSE)

```{r, echo = T, eval = F}
class(TRUE)
class(FALSE)
favorite.numeric == 8.8
favorite.numeric == 9.9
class(favorite.numeric == 8.8)
```

- We use the `==` to test for equality in R



## Vectors

```{r, echo = T, eval = F}
1:10
seq(0, 10, 2)  # seq(from, to, step)
myvector <- 1:10
b <- c(3,4,5)
beers <- c("BUD LIGHT", "BUSCH LIGHT", "COORS LIGHT", "MILLER LITE", "NATURAL LIGHT")
class(beers)
```


- We can create one-dimensional data structures called “vectors”.

- `c(...)`: Returns a vector that is constructed from one or more arguments, with the order of the vector elements corresponding to the order of the arguments.


## Factors

```{r, echo = T, eval = F}
beers <- as.factor(beers)
class(beers)

levels(beers)
nlevels(beers)
```


- Factors store categorical data. 

- Under the hood, factors are actually integers that have a string label attached to each unique integer. 
  - For example, if we have a long list of Male/Female labels for each of our patients, this will be stored a “row” of zeros and ones by R.


:::


## R Basics
### Arithmetic operations and mathematical functions



::: {.panel-tabset}

## Algebra

:::: {.columns}
::: {.column width="50%"}
```{r, echo = T, eval = F}
5 + 3
5 - 3
5 * 3
5 / 3
5^3
```
:::

::: {.column width="50%"}
```{r, echo = T, eval = F}
(3 + 4)^2
3 + 4^2
3 + 2*4^2
3 + 2*4 + 2
(3 + 2) * (4 + 2)
```
:::

::::

- R can be used for a wide range of mathematical calculations.


## Math functions
- R has many built-in mathematical functions that facilitate calculations and data analysis.

:::: {.columns}
::: {.column width="50%"}
- `abs(x)`: the absolute value $|x|$ 
- `sqrt(x)`: the square root $\sqrt{x}$
- `exp(x)`: the exponential value $e^x$, where $e = 2.718...$
- `log(x)`: the natural logarithm $\log_{e}(x)$, or simply $\log(x)$

:::

::: {.column width="50%"}
```{r, echo = T, eval = F}
5 * abs(-3)
sqrt(17) / 2
exp(3)
log(3)
log(exp(3))
exp(log(3))
```

:::
::::

:::


## R Basics
### `NULL` and `NA` values


```{r, echo = T, eval = F}
c(c(), 1, NULL)
c("a", NA, "c")
```


- `NULL` is just an alias for `c()`, the empty vector.
- `NA` indicates missing or unavailable data.



<script>
document.addEventListener('wheel', function(event) {
    if (event.deltaY > 0) {
        Reveal.next(); // Scroll down to go to the next slide
    } else {
        Reveal.prev(); // Scroll up to go to the previous slide
    }
}, false);

window.onload = function() {
    document.querySelectorAll('a').forEach(function(link) {
        link.setAttribute('target', '_blank');
    });
};

</script>